/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WordsImport } from './routes/words'
import { Route as LoginImport } from './routes/login'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedWithStatusBarImport } from './routes/_authenticated/_with-status-bar'
import { Route as AuthenticatedWordsNewImport } from './routes/_authenticated/words_.new'
import { Route as AuthenticatedWordsWordSetIdImport } from './routes/_authenticated/words_.$wordSetId'
import { Route as AuthenticatedWithStatusBarSettingsImport } from './routes/_authenticated/_with-status-bar/settings'
import { Route as AuthenticatedWithStatusBarProblemsImport } from './routes/_authenticated/_with-status-bar/problems'
import { Route as AuthenticatedWithStatusBarProblemsProblemIdImport } from './routes/_authenticated/_with-status-bar/problems_.$problemId'

// Create/Update Routes

const WordsRoute = WordsImport.update({
  id: '/words',
  path: '/words',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedWithStatusBarRoute = AuthenticatedWithStatusBarImport.update(
  {
    id: '/_with-status-bar',
    getParentRoute: () => AuthenticatedRoute,
  } as any,
)

const AuthenticatedWordsNewRoute = AuthenticatedWordsNewImport.update({
  id: '/words_/new',
  path: '/words/new',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedWordsWordSetIdRoute =
  AuthenticatedWordsWordSetIdImport.update({
    id: '/words_/$wordSetId',
    path: '/words/$wordSetId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedWithStatusBarSettingsRoute =
  AuthenticatedWithStatusBarSettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthenticatedWithStatusBarRoute,
  } as any)

const AuthenticatedWithStatusBarProblemsRoute =
  AuthenticatedWithStatusBarProblemsImport.update({
    id: '/problems',
    path: '/problems',
    getParentRoute: () => AuthenticatedWithStatusBarRoute,
  } as any)

const AuthenticatedWithStatusBarProblemsProblemIdRoute =
  AuthenticatedWithStatusBarProblemsProblemIdImport.update({
    id: '/problems_/$problemId',
    path: '/problems/$problemId',
    getParentRoute: () => AuthenticatedWithStatusBarRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/words': {
      id: '/words'
      path: '/words'
      fullPath: '/words'
      preLoaderRoute: typeof WordsImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/_with-status-bar': {
      id: '/_authenticated/_with-status-bar'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedWithStatusBarImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/_with-status-bar/problems': {
      id: '/_authenticated/_with-status-bar/problems'
      path: '/problems'
      fullPath: '/problems'
      preLoaderRoute: typeof AuthenticatedWithStatusBarProblemsImport
      parentRoute: typeof AuthenticatedWithStatusBarImport
    }
    '/_authenticated/_with-status-bar/settings': {
      id: '/_authenticated/_with-status-bar/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedWithStatusBarSettingsImport
      parentRoute: typeof AuthenticatedWithStatusBarImport
    }
    '/_authenticated/words_/$wordSetId': {
      id: '/_authenticated/words_/$wordSetId'
      path: '/words/$wordSetId'
      fullPath: '/words/$wordSetId'
      preLoaderRoute: typeof AuthenticatedWordsWordSetIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/words_/new': {
      id: '/_authenticated/words_/new'
      path: '/words/new'
      fullPath: '/words/new'
      preLoaderRoute: typeof AuthenticatedWordsNewImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/_with-status-bar/problems_/$problemId': {
      id: '/_authenticated/_with-status-bar/problems_/$problemId'
      path: '/problems/$problemId'
      fullPath: '/problems/$problemId'
      preLoaderRoute: typeof AuthenticatedWithStatusBarProblemsProblemIdImport
      parentRoute: typeof AuthenticatedWithStatusBarImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedWithStatusBarRouteChildren {
  AuthenticatedWithStatusBarProblemsRoute: typeof AuthenticatedWithStatusBarProblemsRoute
  AuthenticatedWithStatusBarSettingsRoute: typeof AuthenticatedWithStatusBarSettingsRoute
  AuthenticatedWithStatusBarProblemsProblemIdRoute: typeof AuthenticatedWithStatusBarProblemsProblemIdRoute
}

const AuthenticatedWithStatusBarRouteChildren: AuthenticatedWithStatusBarRouteChildren =
  {
    AuthenticatedWithStatusBarProblemsRoute:
      AuthenticatedWithStatusBarProblemsRoute,
    AuthenticatedWithStatusBarSettingsRoute:
      AuthenticatedWithStatusBarSettingsRoute,
    AuthenticatedWithStatusBarProblemsProblemIdRoute:
      AuthenticatedWithStatusBarProblemsProblemIdRoute,
  }

const AuthenticatedWithStatusBarRouteWithChildren =
  AuthenticatedWithStatusBarRoute._addFileChildren(
    AuthenticatedWithStatusBarRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedWithStatusBarRoute: typeof AuthenticatedWithStatusBarRouteWithChildren
  AuthenticatedWordsWordSetIdRoute: typeof AuthenticatedWordsWordSetIdRoute
  AuthenticatedWordsNewRoute: typeof AuthenticatedWordsNewRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedWithStatusBarRoute: AuthenticatedWithStatusBarRouteWithChildren,
  AuthenticatedWordsWordSetIdRoute: AuthenticatedWordsWordSetIdRoute,
  AuthenticatedWordsNewRoute: AuthenticatedWordsNewRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedWithStatusBarRouteWithChildren
  '/login': typeof LoginRoute
  '/words': typeof WordsRoute
  '/problems': typeof AuthenticatedWithStatusBarProblemsRoute
  '/settings': typeof AuthenticatedWithStatusBarSettingsRoute
  '/words/$wordSetId': typeof AuthenticatedWordsWordSetIdRoute
  '/words/new': typeof AuthenticatedWordsNewRoute
  '/problems/$problemId': typeof AuthenticatedWithStatusBarProblemsProblemIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedWithStatusBarRouteWithChildren
  '/login': typeof LoginRoute
  '/words': typeof WordsRoute
  '/problems': typeof AuthenticatedWithStatusBarProblemsRoute
  '/settings': typeof AuthenticatedWithStatusBarSettingsRoute
  '/words/$wordSetId': typeof AuthenticatedWordsWordSetIdRoute
  '/words/new': typeof AuthenticatedWordsNewRoute
  '/problems/$problemId': typeof AuthenticatedWithStatusBarProblemsProblemIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/words': typeof WordsRoute
  '/_authenticated/_with-status-bar': typeof AuthenticatedWithStatusBarRouteWithChildren
  '/_authenticated/_with-status-bar/problems': typeof AuthenticatedWithStatusBarProblemsRoute
  '/_authenticated/_with-status-bar/settings': typeof AuthenticatedWithStatusBarSettingsRoute
  '/_authenticated/words_/$wordSetId': typeof AuthenticatedWordsWordSetIdRoute
  '/_authenticated/words_/new': typeof AuthenticatedWordsNewRoute
  '/_authenticated/_with-status-bar/problems_/$problemId': typeof AuthenticatedWithStatusBarProblemsProblemIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/words'
    | '/problems'
    | '/settings'
    | '/words/$wordSetId'
    | '/words/new'
    | '/problems/$problemId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/words'
    | '/problems'
    | '/settings'
    | '/words/$wordSetId'
    | '/words/new'
    | '/problems/$problemId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/words'
    | '/_authenticated/_with-status-bar'
    | '/_authenticated/_with-status-bar/problems'
    | '/_authenticated/_with-status-bar/settings'
    | '/_authenticated/words_/$wordSetId'
    | '/_authenticated/words_/new'
    | '/_authenticated/_with-status-bar/problems_/$problemId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  WordsRoute: typeof WordsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  WordsRoute: WordsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/login",
        "/words"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/_with-status-bar",
        "/_authenticated/words_/$wordSetId",
        "/_authenticated/words_/new"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/words": {
      "filePath": "words.tsx"
    },
    "/_authenticated/_with-status-bar": {
      "filePath": "_authenticated/_with-status-bar.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/_with-status-bar/problems",
        "/_authenticated/_with-status-bar/settings",
        "/_authenticated/_with-status-bar/problems_/$problemId"
      ]
    },
    "/_authenticated/_with-status-bar/problems": {
      "filePath": "_authenticated/_with-status-bar/problems.tsx",
      "parent": "/_authenticated/_with-status-bar"
    },
    "/_authenticated/_with-status-bar/settings": {
      "filePath": "_authenticated/_with-status-bar/settings.tsx",
      "parent": "/_authenticated/_with-status-bar"
    },
    "/_authenticated/words_/$wordSetId": {
      "filePath": "_authenticated/words_.$wordSetId.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/words_/new": {
      "filePath": "_authenticated/words_.new.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/_with-status-bar/problems_/$problemId": {
      "filePath": "_authenticated/_with-status-bar/problems_.$problemId.tsx",
      "parent": "/_authenticated/_with-status-bar"
    }
  }
}
ROUTE_MANIFEST_END */
